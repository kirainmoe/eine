{"version":3,"sources":["common/constant.ts","common/actionType.ts","utils/getPreservedAuthorizationInfo.ts","reducers/BotReducer.ts","reducers/RecordReducer.ts","common/types.ts","reducers/UserInterfaceReducer.ts","reducers/index.ts","actions/auth.ts","common/api.ts","sagas/auth.ts","actions/botInfo.ts","sagas/botInfo.ts","sagas/index.ts","stores/index.ts","components/InstallPage/index.tsx","components/LoginPage/index.tsx","common/MessageComponentType.ts","utils/getAvatarUrl.ts","utils/asStr.ts","utils/serializeMessage.ts","actions/ui.ts","components/PanelPage/Profile.tsx","components/PanelPage/Navigator.tsx","actions/record.ts","utils/websocket.ts","components/PanelPage/Message/MessageList.tsx","components/PanelPage/common/Bubble.tsx","components/PanelPage/common/InputBox.tsx","components/PanelPage/Message/GroupMessage.tsx","components/PanelPage/Message/FriendMessage.tsx","components/PanelPage/List/FriendList.tsx","components/PanelPage/List/GroupList.tsx","components/PanelPage/index.tsx","components/App.tsx","index.tsx"],"names":["LoginStatus","GET_BOT_PUBLIC_INFO","SET_BOT_PUBLIC_INFO","GET_BOT_ACCOUNT_INFO","SET_BOT_ACCOUNT_INFO","DO_LOGIN","SET_LOGIN_SUCCESS","SET_LOGIN_FAILED","TOGGLE_SHOW_PROFILE_CARD","UPDATE_RECENT_MESSAGE_LIST","CLEAR_UNREAD_TAG","SET_CONVERSATION_TARGET","UPDATE_MESSAGE_RECORD","NAME","VERSION","REPO_URL","initialAuthorizationInfo","uid","preservedExpire","localStorage","getItem","currentTimestamp","Date","usePreservedAuthorizationInfo","Number","username","authorization","expire","getPreservedAuthorizationInfo","initialState","botName","loginStatus","NOT_LOGIN","loginErrorCode","loginErrorMessage","qq","profile","friends","groups","Sex","GroupPermission","MessageTypeStr","messageRecords","messageEventType","FRIEND_MESSAGE","GROUP_MESSAGE","TEMP_MESSAGE","STRANGER_MESSAGE","showProfileCard","recentMessages","currentConversationType","currentConversationTarget","combineReducers","bot","state","action","type","payload","setItem","authToken","LOGIN_SUCCESS","LOGIN_FAILED","code","message","friendList","groupList","ui","mergeObjects","console","log","id","name","avatar","priority","timestamp","lastMessageStr","messageStr","isRead","sourceType","sender","conversationType","target","record","mergedObject","concat","slice","messageChain","time","setLoginSuccess","setLoginFailed","apiUrls","botAccountInfo","botPublicInfo","install","login","authSaga","call","Axios","post","password","resp","data","put","response","status","takeLatest","fetchBotPublicInfo","fetchBotAccountInfo","botInfoSaga","get","result","headers","error","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","InstallPage","styled","div","CardContainer","PoweredBy","MagicTokenTips","p","Install","props","Item","Form","useSelector","history","useHistory","onFinish","a","magic_token","md5","catch","err","errors","map","item","msg","join","success","setTimeout","push","className","title","rules","required","placeholder","Password","wrapperCol","offset","span","htmlType","href","LoginPageContiainer","LoginPage","dispatch","useDispatch","useEffect","doLogin","style","padding","float","MessageComponentTypeStr","PokeType","getUserAvatarUrl","userId","getGroupAvatarUrl","groupId","asStr","AT","display","AT_ALL","FACE","PLAIN","text","IMAGE","FLASH_IMAGE","VOICE","XML","JSON","APP","POKE","DICE","MUSIC_SHARE","summary","FILE","toString","serializeMessage","filter","length","toggleShowProfileCard","updateRecentMessageList","group","remark","nickname","memberName","ProfileCardBackstage","ProfileCardContainer","BaseProfile","BaseProfileAvatar","img","BaseProfileNameContainer","BaseProfileNickname","BaseProfileBotName","BaseProfileSign","LogoutButton","ProfileCard","onClick","e","stopPropagation","src","alt","MessageEmoji","theme","size","fill","sign","info","removeItem","window","location","Logout","NavigatorContainer","NavigatorAvatar","NavigatorLinkLabel","NavigatorLink","NavLink","NavigatorCopyright","Navigator","referrerPolicy","to","Message","Peoples","EveryUser","SettingOne","updateMessageRecord","ws","token","undefined","resolveWebsocketMessage","rawMessage","parse","includes","sendViaWebsocket","send","stringify","MessageListContainer","MessageItem","MessageItemAvatar","MessageItemLabel","MessageItemName","MessageItemContent","MessageItemTime","MessageList","Object","values","sort","b","index","replace","toLowerCase","moment","format","BubbleContainer","BubbleAvatar","BubbleContentContainer","BubbleSenderAndTime","BubbbleTime","BubbleContent","RecordImage","At","parseMessageChain","components","forEach","url","imageId","Bubble","lastId","showTag","locale","fromNow","InputBoxContainer","textarea","InputBox","React","createRef","onKeyDown","event","key","preventDefault","sendContent","value","axios","then","res","current","getState","ref","GroupMessageContainer","GroupInfoContainer","GroupAvatar","GroupInfoLabel","GroupNameLabel","GroupConfigLabel","SplitLine","GroupRecordContainer","GroupMessagePage","match","params","groupItem","useState","groupInfo","setGroupInfo","groupConfig","setGroupConfig","recordsContainerRef","renderRecords","useMemo","getSenderName","tmp","scrollTop","scrollHeight","members","Clipboard","announcement","FriendMessageContainer","FriendInfoContainer","FriendAvatar","FriendLabel","FriendNameLabel","FriendSignLabel","FriendRecordContainer","FriendMessagePage","friendId","friendItem","friendInfo","setFriendInfo","assign","FriendListContainer","FriendItem","Link","ContainerTitle","FriendList","renderFriends","friend","GroupListContainer","GroupItem","GroupLabel","GroupList","PanelPage","getBotAccountInfo","WebSocket","addEventListener","createWebsocketConnection","protocol","startsWith","host","path","exact","component","AppContainer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb463e47.chunk.js","sourcesContent":["export const NAME = \"🎩  Eine Framework\";\n\nexport const SHORT_NAME = \"🎩 Eine\";\n\nexport const VERSION = \"1.0.0\";\n\nexport const REPO_URL = \"https://github.com/kirainmoe/eine\";\n\nexport enum LoginStatus {\n  NOT_LOGIN = 0,\n  LOGIN_SUCCESS = 1,\n  LOGIN_FAILED = 2,\n}","// BotReducer\nexport const GET_BOT_PUBLIC_INFO = \"GET_BOT_PUBLIC_INFO\";\nexport const SET_BOT_PUBLIC_INFO = \"SET_BOT_PUBLIC_INFO\";\nexport const GET_BOT_ACCOUNT_INFO = \"GET_BOT_ACCOUNT_INFO\";\nexport const SET_BOT_ACCOUNT_INFO = \"SET_BOT_ACCOUNT_INFO\";\n\nexport const DO_LOGIN = \"DO_LOGIN\";\nexport const SET_LOGIN_SUCCESS = \"SET_LOGIN_SUCCESS\";\nexport const SET_LOGIN_FAILED = \"SET_LOGIN_FAILED\";\n\n// UserInterfaceReducer\nexport const TOGGLE_SHOW_PROFILE_CARD = \"TOGGLE_SHOW_PROFILE_CARD\";\nexport const UPDATE_RECENT_MESSAGE_LIST = \"UPDATE_RECENT_MESSAGE_LIST\";\nexport const CLEAR_UNREAD_TAG = \"CLEAR_UNREAD_TAG\";\nexport const SET_CONVERSATION_TARGET = \"SET_CONVERSATION_TARGET\";\n\n//RecordReducer\nexport const UPDATE_MESSAGE_RECORD = \"UPDATE_MESSAGE_RECORD\";","import { AuthorizatoinInfo } from \"common/types\";\n\nexport const getPreservedAuthorizationInfo = () => {\n  const preservedExpire =  localStorage.getItem(\"eine_expire\");\n  const currentTimestamp = +new Date();\n  const usePreservedAuthorizationInfo = preservedExpire && Number(preservedExpire) > currentTimestamp;\n  let uid;\n  let initialAuthorizationInfo: AuthorizatoinInfo = {\n    uid: (usePreservedAuthorizationInfo && (uid = localStorage.getItem(\"eine_uid\"))) ?  Number(uid) :  null,\n    username: usePreservedAuthorizationInfo ? localStorage.getItem(\"eine_username\") : null,\n    authorization: usePreservedAuthorizationInfo ? localStorage.getItem(\"eine_authorization\") : null,\n    expire: Number(preservedExpire),\n  };\n\n  if (!initialAuthorizationInfo.uid || !initialAuthorizationInfo.username || !initialAuthorizationInfo.authorization) {\n    initialAuthorizationInfo = {\n      uid: null,\n      username: null,\n      authorization: null,\n      expire: 0,\n    };\n  };\n  return initialAuthorizationInfo;\n}","import { DO_LOGIN, SET_BOT_ACCOUNT_INFO, SET_BOT_PUBLIC_INFO, SET_LOGIN_FAILED, SET_LOGIN_SUCCESS } from \"common/actionType\";\nimport { LoginStatus } from \"common/constant\";\nimport { Friend, Group, Profile } from \"common/types\";\nimport { getPreservedAuthorizationInfo } from \"utils/getPreservedAuthorizationInfo\";\n\n// get preserved login state from localStorage\nconst initialAuthorizationInfo = getPreservedAuthorizationInfo();\n\nconst initialState = {\n  // bot public info\n  botName: \"Eine\",\n\n  // login status\n  loginStatus: LoginStatus.NOT_LOGIN,\n  loginErrorCode: 0,\n  loginErrorMessage: \"\",\n  ...initialAuthorizationInfo,\n\n  // bot account info,\n  qq: 0,\n  profile: null,\n  friends: [],\n  groups: [],\n};\n\nexport interface BotReducerProps {\n  authorization: string | null;\n  botName: string;\n  expire: number;\n  friends: Friend[];\n  groups: Group[];\n  loginErrorCode: number;\n  loginErrorMessage: string;\n  loginStatus: LoginStatus;\n  qq: number;\n  profile: Profile | null;\n  uid: number | null;\n  username: string | null;\n}\n\nexport default function BotReducer(state: BotReducerProps = initialState, action: any) {\n  switch (action.type) {\n    case SET_BOT_PUBLIC_INFO:\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    case SET_LOGIN_SUCCESS:\n      localStorage.setItem(\"eine_uid\", action.uid);\n      localStorage.setItem(\"eine_username\", action.username);\n      localStorage.setItem(\"eine_authorization\", action.authToken);\n      localStorage.setItem(\"eine_expire\", action.expire);\n      return {\n        ...state,\n        uid: action.uid,\n        username: action.username,\n        authorization: action.authToken,\n        expire: action.expire,\n        loginStatus: LoginStatus.LOGIN_SUCCESS,\n        loginErrorCode: 0,\n        loginErrorMessage: \"\",\n      };\n\n    case SET_LOGIN_FAILED:\n      return {\n        ...state,\n        loginStatus: LoginStatus.LOGIN_FAILED,\n        loginErrorCode: action.code,\n        loginErrorMessage: action.message,\n      };\n\n    case DO_LOGIN:\n      return {\n        ...state,\n        loginStatus: LoginStatus.NOT_LOGIN,\n      };\n\n    case SET_BOT_ACCOUNT_INFO:\n      return {\n        ...state,\n        qq: action.payload.qq,\n        profile: action.payload.profile,\n        friends: action.payload.friendList,\n        groups: action.payload.groupList,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { UPDATE_MESSAGE_RECORD } from \"common/actionType\";\nimport { MessageChain } from \"common/MessageComponentType\";\nimport { MessageTypeStr, SenderType } from \"common/types\";\n\nconst initialState = {\n  messageRecords: {}\n};\n\nexport interface MessageRecordItem {\n  sender: SenderType;\n  messageChain: MessageChain;\n  type: MessageTypeStr;\n  time: number;\n}\n\nexport interface MessageRecords {\n  [key: number]: MessageRecordItem[];\n}\n\nexport interface RecordReducerState {\n  messageRecords: MessageRecords;\n}\n\nexport default function RecordReducer(state: RecordReducerState = initialState, action: any) {\n  let mergedObject: any = {};\n  switch (action.type) {\n    case UPDATE_MESSAGE_RECORD:\n      mergedObject[action.target] = [].concat(\n        (state.messageRecords[action.target] ? state.messageRecords[action.target].slice(-100) : []) as any,\n        [\n          {\n            type: action.sourceType,\n            sender: action.sender,\n            messageChain: action.messageChain,\n            time: +new Date(),\n          },\n        ] as any\n      );\n      return {\n        ...state,\n        messageRecords: {\n          ...state.messageRecords,\n          ...mergedObject,\n        }\n      }\n    default:\n      return state;\n  }\n}","import { MessageChain } from \"./MessageComponentType\";\n\nexport interface AuthorizatoinInfo {\n  authorization: string | null;\n  uid: number | null;\n  username: string | null;\n  expire: number;\n}\n\nexport enum Sex {\n  UNKNOWN = \"UNKNOWN\",\n  MALE = \"MALE\",\n  FEMALE = \"FEMALE\",\n}\n\nexport interface Profile {\n  nickname: string;\n  email: string;\n  age: number;\n  level: number;\n  sign: number;\n  sex: Sex;\n}\n\nexport interface Friend {\n  id: number;\n  nickname: string;\n  remark: string;\n}\n\nexport enum GroupPermission {\n  OWNER = \"OWNER\",\n  MEMBER = \"MEMBER\",\n  ADMINISTRATOR = \"ADMINISTRATOR\"\n}\n\nexport interface Group {\n  id: number;\n  name: string;\n  permission: GroupPermission;\n}\n\nexport interface GroupMember {\n  id: number;\n  memberName: string;\n  specialTitle: string;\n  permission: GroupPermission;\n  joinTimestamp: number;\n  lastSpeakTimestamp: number;\n  muteTimeRemaining: number;\n  group: Group;\n}\n\n\nexport enum MessageTypeStr {\n  FRIEND_MESSAGE = \"FriendMessage\",\n  GROUP_MESSAGE = \"GroupMessage\",\n  TEMP_MESSAGE = \"TempMessage\",\n  STRANGER_MESSAGE = \"StrangerMessage\",\n  OTHER_CLIENT_MESSAGE = \"OtherClientMessage\",\n}\n\n// ------------- 好友消息 -------------\n\nexport type FriendMessageSender = Friend;\n\n/** 好友消息 */\nexport interface FriendMessage {\n  type: MessageTypeStr.FRIEND_MESSAGE;\n  sender: FriendMessageSender;\n  messageChain: MessageChain;\n}\n\n// ------------- 群消息 -------------\n\nexport type GroupMessageSender = GroupMember;\n\nexport interface GroupMessage {\n  type: MessageTypeStr.GROUP_MESSAGE;\n  sender: GroupMessageSender;\n  messageChain: MessageChain;\n}\n\n// ------------- 临时消息 -------------\n\nexport type TempMessageSender = GroupMessageSender;\n\nexport interface TempMessage {\n  type: MessageTypeStr.TEMP_MESSAGE;\n  sender: TempMessageSender;\n  messageChain: MessageChain;\n}\n\n// ------------- 陌生人消息 -------------\n\nexport type StrangerMessageSender = Friend;\n\nexport interface StrangerMessage {\n  type: MessageTypeStr.STRANGER_MESSAGE;\n  sender: StrangerMessageSender;\n  messageChain: MessageChain;\n}\n\n// ------------- 其它客户端消息 -------------\n\nexport interface OtherClientMessageSender {\n  id: number;\n  platform: string;\n}\n\nexport interface OtherClientMessage {\n  type: MessageTypeStr.OTHER_CLIENT_MESSAGE;\n  sender: OtherClientMessageSender;\n  messageChain: MessageChain;\n}\n\n// ------------- 发送目标 ------------------\nexport interface SendTarget {\n  id?: number;\n  group?: { id?: number };\n  myself?: boolean;\n}\n\nexport type SenderType = FriendMessageSender | GroupMessageSender | TempMessageSender | StrangerMessageSender | OtherClientMessageSender;\n\nexport type MessageType = FriendMessage | GroupMessage | TempMessage | StrangerMessage | OtherClientMessage;\n\nexport const messageEventType = [\n  MessageTypeStr.FRIEND_MESSAGE,\n  MessageTypeStr.GROUP_MESSAGE,\n  MessageTypeStr.TEMP_MESSAGE,\n  MessageTypeStr.STRANGER_MESSAGE,\n];","import { CLEAR_UNREAD_TAG, SET_CONVERSATION_TARGET, TOGGLE_SHOW_PROFILE_CARD, UPDATE_RECENT_MESSAGE_LIST } from \"common/actionType\";\nimport { MessageTypeStr, SenderType } from \"common/types\";\n\nconst initialState = {\n  showProfileCard: false,\n  recentMessages: {},\n\n  currentConversationType: MessageTypeStr.FRIEND_MESSAGE,\n  currentConversationTarget: 0,\n};\n\nexport interface RecentMessageItem {\n  id: number;\n  name: string;\n  avatar: string;\n  priority: number;\n  timestamp: number;\n  lastMessageStr: string;\n  isRead: boolean;\n  sourceType: MessageTypeStr;\n  sender: SenderType;\n}\n\nexport interface UIReducerState {\n  showProfileCard: boolean;\n  recentMessages: {\n    [key: number]: RecentMessageItem;\n  };\n  currentConversationType: MessageTypeStr;\n  currentConversationTarget: number;\n}\n\nexport default function UIReducer(state = initialState, action: any) {\n  let mergeObjects: { [key: number]: RecentMessageItem } = {};\n\n  switch (action.type) {\n    case TOGGLE_SHOW_PROFILE_CARD:\n      return {\n        ...state,\n        showProfileCard: !state.showProfileCard,\n      };\n\n    case UPDATE_RECENT_MESSAGE_LIST:\n      console.log(action.id === state.currentConversationTarget);\n      mergeObjects[action.id] = {\n        id: action.id,\n        name: action.name,\n        avatar: action.avatar,\n        priority: +new Date(),\n        timestamp: +new Date(),\n        lastMessageStr: action.messageStr,\n        isRead: action.id === state.currentConversationTarget,\n        sourceType: action.sourceType,\n        sender: action.sender,\n      };\n      return {\n        ...state,\n        recentMessages: {\n          ...state.recentMessages,\n          ...mergeObjects\n        }\n      };\n\n    case CLEAR_UNREAD_TAG:\n      mergeObjects = {};\n      mergeObjects[action.id] = {\n         ...(state.recentMessages as any)[action.id],\n         isRead: true\n      };\n      return {\n        ...state,\n        recentMessages: {\n          ...state.recentMessages,\n          ...mergeObjects,\n        }\n      };\n\n    case SET_CONVERSATION_TARGET:\n      return {\n        ...state,\n        currentConversationType: action.conversationType,\n        currentConversationTarget: action.target,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport BotReducer from \"./BotReducer\";\nimport RecordReducer from \"./RecordReducer\";\nimport UIReducer from \"./UserInterfaceReducer\";\n\nexport default combineReducers({\n  bot: BotReducer,\n  ui: UIReducer,\n  record: RecordReducer,\n});","import { DO_LOGIN, SET_LOGIN_FAILED, SET_LOGIN_SUCCESS } from \"common/actionType\";\n\nexport const doLogin = (username: string, password: string) => ({\n  type: DO_LOGIN,\n  username,\n  password,\n});\n\nexport const setLoginSuccess = (\n  uid: number,\n  username: string,\n  authToken: string,\n  expire: number\n) => ({\n  type: SET_LOGIN_SUCCESS,\n  uid,\n  username,\n  authToken,\n  expire,\n});\n\nexport const setLoginFailed = (code: number, message: string) => ({\n  type: SET_LOGIN_FAILED,\n  code,\n  message\n});\n","export const apiUrls = {\n  botAccountInfo: '/api/account_info',\n  botPublicInfo: '/api/public_info',\n  install: '/api/install',\n  login: '/api/login',\n};\n\nexport default apiUrls;","import { put, call, takeLatest } from \"@redux-saga/core/effects\";\nimport Axios, { AxiosResponse } from \"axios\";\n\nimport { doLogin, setLoginFailed, setLoginSuccess } from \"actions/auth\";\nimport { DO_LOGIN } from \"common/actionType\";\nimport apiUrls from \"common/api\";\n\nexport function* login(action: ReturnType<typeof doLogin>) {\n  try {\n    const resp: AxiosResponse = yield call(Axios.post, apiUrls.login, {\n      username: action.username,\n      password: action.password,\n    });\n\n    if (resp.data.code === 0) {\n      const payload = resp.data.payload;\n      const { uid, username, authToken, expire } = payload;\n      yield put(setLoginSuccess(uid, username, authToken, expire));\n    } else {\n      yield put(setLoginFailed(resp.data.code, resp.data.message));\n    }\n  } catch(err: any) {\n    const resp = err.response;\n    if (resp.status >= 400) {\n      yield put(setLoginFailed(resp.data ? resp.data.code : resp.status, resp.data ? resp.data.message : \"\"));\n    }\n  }\n}\n\nexport function* authSaga() {\n  yield takeLatest(DO_LOGIN, login);\n}","import {\n  GET_BOT_ACCOUNT_INFO,\n  GET_BOT_PUBLIC_INFO,\n  SET_BOT_ACCOUNT_INFO,\n  SET_BOT_PUBLIC_INFO,\n} from \"common/actionType\";\nimport { Friend, Group, Profile } from \"common/types\";\n\nexport const getBotPublicInfo = () => ({ type: GET_BOT_PUBLIC_INFO });\n\nexport const setBotPublicInfo = (botName: string) => ({\n  type: SET_BOT_PUBLIC_INFO,\n  payload: {\n    botName,\n  },\n});\n\nexport const getBotAccountInfo = (uid: number, authorization: string) => ({\n  type: GET_BOT_ACCOUNT_INFO,\n  uid,\n  authorization,\n});\n\nexport const setBotAccountInfo = (payload: {\n  qq: number;\n  profile: Profile;\n  friendList: Friend[];\n  groupList: Group[];\n}) => ({\n  type: SET_BOT_ACCOUNT_INFO,\n  payload,\n});\n","import Axios, { AxiosResponse } from \"axios\";\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\nimport apiUrls from \"common/api\";\nimport { setBotAccountInfo, setBotPublicInfo } from \"actions/botInfo\";\nimport { GET_BOT_ACCOUNT_INFO, GET_BOT_PUBLIC_INFO } from \"common/actionType\";\nimport { message } from \"antd\";\n\nexport function* fetchBotPublicInfo() {\n  const result: AxiosResponse  = yield call(Axios.get, apiUrls.botPublicInfo);\n\n  if (result.data.code === 0) {\n    yield put(setBotPublicInfo(result.data.payload.botName));\n  }\n}\n\nexport function* fetchBotAccountInfo(action: any) {\n  try {\n    const resp: AxiosResponse = yield call(\n      Axios.get,\n      `${apiUrls.botAccountInfo}?uid=${action.uid}`,\n      {\n        headers: {\n          authorization: action.authorization,\n        },\n      }\n    );\n    yield put(setBotAccountInfo(resp.data.payload));\n  } catch(err: any) {\n    const resp = err.response;\n    message.error(`获取账号信息失败：${resp.data ? resp.data.message : resp.status}`);\n  }\n}\n\nexport function* botInfoSaga() {\n  yield takeLatest(GET_BOT_PUBLIC_INFO, fetchBotPublicInfo);\n  yield takeLatest(GET_BOT_ACCOUNT_INFO, fetchBotAccountInfo);\n}\n","import { all } from 'redux-saga/effects';\nimport { authSaga } from './auth';\n\nimport { botInfoSaga } from './botInfo';\n\nexport default function* rootSaga() {\n  yield all([\n    botInfoSaga(),\n    authSaga(),\n  ]);\n}","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from 'reducers';\nimport rootSaga from 'sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nexport default store;\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import md5 from \"md5\";\nimport Axios from \"axios\";\nimport styled from \"styled-components\";\n\nimport { Card, Form, Input, Button, message } from \"antd\";\nimport { RouteProps, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { NAME, REPO_URL, VERSION } from \"common/constant\";\nimport { AppState } from \"stores\";\nimport apiUrls from \"common/api\";\n\nconst InstallPage = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CardContainer = styled.div`\n  width: 500px;\n  max-width: 80vw;\n`;\n\nconst PoweredBy = styled.div`\n  margin: 40px 0;\n  text-align: center;\n`;\n\nconst MagicTokenTips = styled.p`\n  margin: 20px 0;\n  font-size: 12px;\n  color: #999;\n`;\n\ninterface InstallProps extends RouteProps {}\n\nexport default function Install(props: InstallProps) {\n  const { Item } = Form;\n  const { botName } = useSelector((state: AppState) => state.bot);\n  const history = useHistory();\n\n  const onFinish = async ({\n    username,\n    password,\n    magic_token,\n  }: {\n    username: string;\n    password: string;\n    magic_token: string;\n  }) => {\n    const response = await Axios.post(apiUrls.install, {\n      username,\n      password: md5(password),\n      magic_token,\n    }).catch(err => {\n      const response = err.response;\n      \n      if (!response.data) {\n        message.error(`初始化失败，服务器返回状态码为 ${response.status}`);\n      } else {\n        message.error(\n          `初始化失败，服务器返回状态码为 ${response.data.code}，原因：${\n            response.data.code === 400\n              ? response.data.errors.map((item: any) => item.msg).join(\", \")\n              : response.data.message\n          }`\n        );\n      }\n\n      return null;\n    });\n\n    if (response && response.data) {\n      message.success(\"初始化、创建用户成功！\");\n      setTimeout(() => history.push('/login'), 3000);\n    }\n  };\n\n  return (\n    <InstallPage className=\"eine-install-page\">\n      <CardContainer>\n        <Card title={`🎩 Welcome to ${botName}!`}>\n          <p>初次进入后台，需要创建 Master 用户。</p>\n          <Form name=\"install-form\" onFinish={onFinish}>\n            <Item name=\"username\" rules={[{ required: true, message: \"请输入用户名！\" }]}>\n              <Input placeholder=\"用户名\" />\n            </Item>\n\n            <Item name=\"password\" rules={[{ required: true, message: \"请输入密码！\" }]}>\n              <Input.Password placeholder=\"密码\" />\n            </Item>\n\n            <Item name=\"magic_token\" rules={[{ required: true, message: \"请输入 Magic Token！\" }]}>\n              <Input placeholder=\"Magic Token\" />\n            </Item>\n\n            <MagicTokenTips>\n              Tips: 你可以在运行 Eine 的控制台中找到 Magic Token. 它是一个长度为 10 个字符的随机字母或数字。\n            </MagicTokenTips>\n\n            <Item wrapperCol={{ offset: 10, span: 16 }}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                创建用户\n              </Button>\n            </Item>\n          </Form>\n        </Card>\n\n        <PoweredBy>\n          Powered by <a href={REPO_URL}>{NAME}</a> v{VERSION}\n        </PoweredBy>\n      </CardContainer>\n    </InstallPage>\n  );\n}\n","import { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport md5 from \"md5\";\n\nimport { Card, Form, Input, Button, message } from \"antd\";\nimport { RouterProps, useHistory } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { AppState } from \"stores\";\nimport { LoginStatus, NAME, REPO_URL, VERSION } from \"common/constant\";\nimport { doLogin } from \"actions/auth\";\n\nconst { Item } = Form;\n\nconst LoginPageContiainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CardContainer = styled.div`\n  width: 500px;\n  max-width: 80vw;\n`;\n\nconst PoweredBy = styled.div`\n  margin: 40px 0;\n  text-align: center;\n`;\n\ninterface LoginPageProps extends RouterProps {}\n\nexport default function LoginPage(props: LoginPageProps) {\n  const { botName, loginStatus, loginErrorMessage, loginErrorCode } = useSelector((state: AppState) => state.bot);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const onFinish = ({ username, password }: { username: string; password: string }) => {\n    dispatch(doLogin(username, md5(password)));\n  };\n\n  useEffect(() => {\n    if (loginStatus === LoginStatus.LOGIN_FAILED) {\n      message.error(`登录失败，原因：${loginErrorMessage} (${loginErrorCode})`);\n    }\n    if (loginStatus === LoginStatus.LOGIN_SUCCESS) {\n      message.success(`登录成功！`);\n      history.push(\"/panel\");\n    }\n  }, [loginStatus, loginErrorCode, loginErrorMessage, history]);\n\n  return (\n    <LoginPageContiainer>\n      <CardContainer>\n        <Card title={`登录 ${botName} 管理后台`}>\n          <Form name=\"user-login\" onFinish={onFinish}>\n            <Item name=\"username\" rules={[{ required: true, message: \"请输入用户名！\" }]}>\n              <Input placeholder=\"用户名\" />\n            </Item>\n            <Item name=\"password\" rules={[{ required: true, message: \"请输入密码！\" }]}>\n              <Input.Password placeholder=\"密码\" />\n            </Item>\n            <p>\n              <Button type=\"link\" style={{ padding: 0 }}>\n                重设登录凭据\n              </Button>\n              <Button type=\"primary\" htmlType=\"submit\" style={{ float: \"right\" }}>\n                登录\n              </Button>\n            </p>\n          </Form>\n        </Card>\n\n        <PoweredBy>\n          Powered by <a href={REPO_URL}>{NAME}</a> {VERSION}\n        </PoweredBy>\n      </CardContainer>\n    </LoginPageContiainer>\n  );\n}\n","import { ReadStream } from \"fs\";\n\nexport enum MessageComponentTypeStr {\n  SOURCE = \"Source\",\n  QUOTE = \"Quote\",\n  AT = \"At\",\n  AT_ALL = \"AtAll\",\n  FACE = \"Face\",\n  PLAIN = \"Plain\",\n  IMAGE = \"Image\",\n  FLASH_IMAGE = \"FlashImage\",\n  VOICE = \"Voice\",\n  XML = \"Xml\",\n  JSON = \"Json\",\n  APP = \"App\",\n  POKE = \"Poke\",\n  DICE = \"Dice\",\n  MUSIC_SHARE = \"MusicShare\",\n  FORWARD_MESSAGE = \"ForwardMessage\",\n  FILE = \"File\",\n\n  PRELOAD = \"Preload\",\n}\n\n/** 戳一戳类型 */\nexport enum PokeType {\n  POKE = \"Poke\",                // 戳一戳\n  SHOW_LOVE = \"ShowLove\",       // 比心\n  LIKE = \"Like\",                // 点赞\n  HEARTBROKEN = \"Heartbroken\",  // 心碎\n  SIX_SIX_SIX = \"SixSixSix\",    // 666\n  FANG_DA_ZHAO = \"FangDaZhao\"   // 放大招\n}\n\n/** 支持的消息类型 */\nexport type MessageComponentType =\n  | Source\n  | Quote\n  | At\n  | AtAll\n  | Face\n  | Plain\n  | Image\n  | FlashImage\n  | Voice\n  | Xml\n  | Json\n  | App\n  | Poke\n  | Dice\n  | MusicShare\n  | ForwardMessage\n  | File\n  | PreloadFile;\n\n/** 消息链数组 */\nexport type MessageChain = (string | MessageComponentType)[];\n\n/** 转发消息节点元素 */\nexport interface ForwardNodeListItem {\n  /** 发送人 QQ 号 */\n  senderId: number;\n\n  /** 发送时间 */\n  time: number;\n\n  /** 显示名称 */\n  senderName: string;\n\n  /** 消息数组 */\n  messageChain: MessageChain;\n\n  /** 消息识别号 */\n  sourceId: number;\n}\n\n/** 转发消息节点 */\nexport type ForwardNodeList = ForwardNodeListItem[];\n\n/** 消息来源 */\nexport interface Source {\n  type: MessageComponentTypeStr.SOURCE;\n\n  /** 消息的识别号，用于引用回复（Source 类型永远为 chain 的第一个元素） */\n  id: number;\n\n  /** 时间戳 */\n  time: number;\n}\n\n/** 引用消息 */\nexport interface Quote {\n  type: MessageComponentTypeStr.QUOTE;\n\n  /** 被引用回复的原消息的 messageId */\n  id: number;\n  \n  /** 被引用回复的原消息所接收的群号，当为好友消息时为 0 */\n  groupId: number;\n  \n  /** 被引用回复的原消息的发送者的 QQ 号 */\n  senderId: number;\n  \n  /** 被引用回复的原消息的接收者者的 QQ 号（或群号） */\n  targetId: number;\n  \n  /** 被引用回复的原消息的 MessageChain 对象 */\n  origin: MessageChain;\n}\n\n/** @成员信息 */\nexport interface At {\n  type: MessageComponentTypeStr.AT;\n  \n  /** 群员 QQ 号 */\n  target: number;\n  \n  /** At 时显示的文字，发送消息时无效，自动使用群名片 */\n  display: string;\n}\n\n/** @全体成员 信息 */\nexport interface AtAll {\n  type: MessageComponentTypeStr.AT_ALL;\n}\n\n/** QQ 表情 */\nexport interface Face {\n  type: MessageComponentTypeStr.FACE;\n  \n  /** 表情编号，可选，优先高于 name */\n  faceId?: number;\n  \n  /** 表情拼音，可选 */\n  name?: string;\n}\n\n/** 文字信息 */\nexport interface Plain {\n  type: MessageComponentTypeStr.PLAIN;\n  \n  /** 文字消息内容 */\n  text: string;\n}\n\n/** 图片信息，出现多个参数时，按照 imageId > url > path > base64 的优先级 */\nexport interface Image {\n  type: MessageComponentTypeStr.IMAGE;\n  \n  /** 图片的 imageId，群图片与好友图片格式不同。不为空时将忽略 url 属性 */\n  imageId?: string;\n  \n  /** 图片的 URL，发送时可作网络图片的链接；接收时为腾讯图片服务器的链接，可用于图片下载 */\n  url?: string | null;\n  \n  /** 图片的路径，发送本地图片，相对路径于 plugins/MiraiAPIHTTP/images */\n  path?: string | null;\n  \n  /** 图片的 Base64 编码 */\n  base64?: string | null;\n}\n\n/** 闪照信息 */\nexport interface FlashImage {\n  type: MessageComponentTypeStr.FLASH_IMAGE;\n  \n  /** 图片的 imageId，群图片与好友图片格式不同。不为空时将忽略 url 属性 */\n  imageId?: string;\n  \n  /** 图片的 URL，发送时可作网络图片的链接；接收时为腾讯图片服务器的链接，可用于图片下载 */\n  url?: string | null;\n  \n  /** 图片的路径，发送本地图片，相对路径于 plugins/MiraiAPIHTTP/images */\n  path?: string | null;\n  \n  /** 图片的 Base64 编码 */\n  base64?: string | null;\n}\n\n/** 语音信息，出现多个参数时，按照 voiceId > url > path > base64 的优先级 */\nexport interface Voice {\n  type: MessageComponentTypeStr.VOICE;\n  \n  /** 语音的 voiceId，不为空时将忽略 url 属性 */\n  voiceId?: string;\n  \n  /** 语音的 URL，发送时可作网络语音的链接；接收时为腾讯语音服务器的链接，可用于语音下载 */\n  url?: string;\n  \n  /** 语音的路径，发送本地语音，相对路径于 plugins/MiraiAPIHTTP/voices */\n  path?: string;\n  \n  /** 语音的 Base64 编码 */\n  base64?: string;\n}\n\n/** XML 类型信息 */\nexport interface Xml {\n  type: MessageComponentTypeStr.XML;\n  \n  /** XML 文本 */\n  xml: string;\n}\n\n/** JSON 类型信息 */\nexport interface Json {\n  type: MessageComponentTypeStr.JSON;\n  \n  /** JSON 文本 */\n  json: string;\n}\n\n/** 小程序类型信息 */\nexport interface App {\n  type: MessageComponentTypeStr.APP;\n  \n  /** App 内容 */\n  app: string;\n}\n\n/** 戳一戳 */\nexport interface Poke {\n  type: MessageComponentTypeStr.POKE;\n\n  /** 戳一戳的类型 */\n  name: PokeType;\n}\n\n/** 骰子 */\nexport interface Dice {\n  type: MessageComponentTypeStr.DICE;\n\n  /** 骰子点数 */\n  value: number;\n}\n\n/** 音乐分享（点歌） */\nexport interface MusicShare {\n  type: MessageComponentTypeStr.MUSIC_SHARE;\n\n  /** 分享类型，如 NeteaseCloudMusic = 网易云音乐; QQMusic = QQ 音乐 等 */\n  kind: string;\n\n  /** 音乐标题 */\n  title: string;\n\n  /** 音乐专辑名称或概括 */\n  summary: string;\n\n  /** 点击跳转地址 */\n  jumpUrl: string;\n\n  /** 封面图片地址 */\n  pictureUrl: string;\n\n  /** 音源地址 */\n  musicUrl: string;\n\n  /** 简介，如 \"[分享] 歌名\" */\n  brief: string;\n}\n\n/** 转发消息 */\nexport interface ForwardMessage {\n  type: MessageComponentTypeStr.FORWARD_MESSAGE;\n\n  /** 转发消息节点 */\n  nodeList: ForwardNodeList;\n}\n\n/** 文件消息 */\nexport interface File {\n  type: MessageComponentTypeStr.FILE;\n\n  /** 文件识别 ID */\n  id: string;\n\n  /** 文件名 */\n  name: string;\n\n  /** 文件大小 */\n  size: number;\n}\n\n\nexport interface PreloadFile {\n  type: MessageComponentTypeStr.PRELOAD;\n\n  originType:\n    | MessageComponentTypeStr.IMAGE\n    | MessageComponentTypeStr.FLASH_IMAGE\n    | MessageComponentTypeStr.VOICE\n    | MessageComponentTypeStr.FILE;\n\n  file: string | ReadStream | Buffer;\n\n  filename?: string;\n\n  path?: string;\n}","export const getUserAvatarUrl = (userId: number) => `http://q.qlogo.cn/g?b=qq&s=100&nk=${userId}`;\n\nexport const getGroupAvatarUrl = (groupId: number) => `http://p.qlogo.cn/gh/${groupId}/${groupId}/0`;","import { MessageComponentTypeStr } from \"common/MessageComponentType\";\n\nexport const asStr = (target: any): string => {\n  if (typeof target === 'string')\n    return target;\n\n  if (target.type) {\n    switch (target.type) {\n      case MessageComponentTypeStr.AT:\n        return `@${target.display}`;\n\n      case MessageComponentTypeStr.AT_ALL:\n        return `@全体成员`;\n\n      case MessageComponentTypeStr.FACE:\n        return `[表情]`;\n\n      case MessageComponentTypeStr.PLAIN:\n        return target.text;\n\n      case MessageComponentTypeStr.IMAGE:\n        return `[图片]`;\n\n      case MessageComponentTypeStr.FLASH_IMAGE:\n        return `[闪照]`;\n\n      case MessageComponentTypeStr.VOICE:\n        return `[语音]`;\n\n      case MessageComponentTypeStr.XML:\n        return `[XML]`;\n\n      case MessageComponentTypeStr.JSON:\n        return `[JSON]`;\n\n      case MessageComponentTypeStr.APP:\n        return `[小程序]`;\n\n      case MessageComponentTypeStr.POKE:\n        return `[魔法表情]`;\n\n      case MessageComponentTypeStr.DICE:\n        return `[骰子]`;\n\n      case MessageComponentTypeStr.MUSIC_SHARE:\n        return `[音乐] ${target.title} - ${target.summary}`;\n\n      case MessageComponentTypeStr.FILE:\n        return `[文件] ${target.name}`;\n        \n      default:\n        return '';\n    }\n  }\n\n  if (target.toString)\n    return target.toString();\n  \n  return '';\n}\n\nexport default asStr;\n","import {MessageChain} from \"common/MessageComponentType\";\nimport asStr from \"./asStr\";\n\nexport const serializeMessage = (messageChain: MessageChain) => {\n  return messageChain.map(message => asStr(message)).filter(item => item.length > 0).join(' ');\n}\n\nexport default serializeMessage;","import { CLEAR_UNREAD_TAG, SET_CONVERSATION_TARGET, TOGGLE_SHOW_PROFILE_CARD, UPDATE_RECENT_MESSAGE_LIST } from \"common/actionType\";\nimport { MessageChain } from \"common/MessageComponentType\";\nimport { FriendMessageSender, GroupMessageSender, MessageTypeStr, SenderType } from \"common/types\";\nimport { getGroupAvatarUrl, getUserAvatarUrl } from \"utils/getAvatarUrl\";\nimport serializeMessage from \"utils/serializeMessage\";\n\nexport const toggleShowProfileCard = () => ({\n  type: TOGGLE_SHOW_PROFILE_CARD,\n});\n\nexport const updateRecentMessageList = (type: MessageTypeStr, sender: SenderType, messageChain: MessageChain) => {\n  let name =\n    type === \"GroupMessage\"\n      ? (sender as GroupMessageSender).group.name\n      : (sender as FriendMessageSender).remark\n      ? (sender as FriendMessageSender).remark\n      : (sender as FriendMessageSender).nickname;\n\n  let avatar =\n    type === \"GroupMessage\"\n      ? getGroupAvatarUrl((sender as GroupMessageSender).group.id)\n      : getUserAvatarUrl((sender as FriendMessageSender).id);\n\n  let id = type === \"GroupMessage\" ? (sender as GroupMessageSender).group.id : (sender as FriendMessageSender).id;\n\n  let messageStr = serializeMessage(messageChain);\n  if (type === \"GroupMessage\")\n    messageStr = `${(sender as GroupMessageSender).memberName}: ${messageStr}`;\n\n  return {\n    type: UPDATE_RECENT_MESSAGE_LIST,\n    id,\n    name,\n    avatar,\n    messageStr,\n    sourceType: type,\n    sender: sender,\n  };\n};\n\n\nexport const clearUnreadTag = (id: number) => ({\n  type: CLEAR_UNREAD_TAG,\n  id\n})\n\nexport const setConversationTargrt = (conversationType: MessageTypeStr, target: number) => ({\n  type: SET_CONVERSATION_TARGET,\n  conversationType,\n  target\n});","import { Logout, MessageEmoji } from \"@icon-park/react\";\nimport { toggleShowProfileCard } from \"actions/ui\";\nimport { message } from \"antd\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteProps } from \"react-router\";\nimport { AppState } from \"stores\";\nimport styled from \"styled-components\";\nimport { getUserAvatarUrl } from \"utils/getAvatarUrl\";\n\ninterface ProfileCardProps extends RouteProps {}\n\nconst ProfileCardBackstage = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 30;\n`;\n\nconst ProfileCardContainer = styled.div`\n  width: 350px;\n  position: fixed;\n  left: 90px;\n  top: 20px;\n  box-shadow: 0px -1px 2px\t-2px rgba(0, 0, 0, 0.16), 0px -3px\t6px\t0px rgba(0, 0, 0, 0.12), 0px 5px\t12px\t4px rgba(0, 0, 0, 0.09);\n  text-align: left;\n  z-index: 35;\n  background: #fff;\n`;\n\nconst BaseProfile = styled.div`\n  height: 35%;\n  padding: 30px 20px;\n  background: #5781f3;\n  display: flex;\n  align-items: center;\n`;\n\nconst BaseProfileAvatar = styled.img`\n  width: 75px;\n  height: 75px;\n  border-radius: 50%;\n  border: 2px solid #fff;  \n`;\n\nconst BaseProfileNameContainer = styled.div`\n  display: inline-block;\n  margin-left: 20px;\n`;\n\nconst BaseProfileNickname = styled.p`\n  font-size: 24px;\n  color: #fff;\n  font-weight: 500;\n  margin: 10px 0 5px 0;\n`;\n\nconst BaseProfileBotName = styled.p`\n  font-size: 14px;\n  color: #fff;\n  margin: 5px 0 10px 0;\n`;\n\nconst BaseProfileSign = styled.div`\n  border-bottom: 1px solid #eee;\n  padding: 14px 10px 14px 10px;\n  text-overflow: ellipsis;\n  white-space: none;\n  overflow: hidden;\n  span { color: #000; margin-left: 10px; }\n  svg { padding-top: 4px; }\n`;\n\nconst LogoutButton = styled.div`\n  padding: 14px 10px 14px 10px;\n  cursor: pointer;\n  transition: .2s ease-out;\n  :hover { background: #e4e4e5; }\n  span { color: #000; margin-left: 10px; }\n  svg { padding-top: 4px; }\n`;\n\nexport default function ProfileCard(props: ProfileCardProps) {\n  const { qq, profile, botName } = useSelector((state: AppState) => state.bot);\n  const dispatch = useDispatch();\n\n  const handleBackstageClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    dispatch(toggleShowProfileCard());\n  };\n  const preventPropagation = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n  }\n  const doLogout = () => {\n    message.info(\"正在退出当前账号……\");\n\n    localStorage.removeItem(\"eine_uid\");\n    localStorage.removeItem(\"eine_username\");\n    localStorage.removeItem(\"eine_authorization\");\n    localStorage.removeItem(\"eine_expire\");\n\n    setTimeout(() => window.location.href = \"/login\", 1000);\n  }\n  \n  return (\n    <ProfileCardBackstage onClick={handleBackstageClick}>\n      <ProfileCardContainer onClick={preventPropagation}>\n        <BaseProfile>\n          <BaseProfileAvatar src={getUserAvatarUrl(qq)} alt=\"avatar\" />\n          <BaseProfileNameContainer>\n            <BaseProfileNickname>{profile ? profile.nickname : null}</BaseProfileNickname>\n            <BaseProfileBotName>BOT 名称：{botName}</BaseProfileBotName>\n          </BaseProfileNameContainer>\n        </BaseProfile>\n        <BaseProfileSign>\n          <MessageEmoji theme=\"filled\" size=\"16\" fill=\"#90959d\"/>\n          <span>{profile ? profile.sign : null}</span>\n        </BaseProfileSign>\n        <LogoutButton onClick={doLogout}>\n          <Logout theme=\"filled\" size=\"16\" fill=\"#90959d\"/>\n          <span>退出登录</span>\n        </LogoutButton>\n      </ProfileCardContainer>\n    </ProfileCardBackstage>\n  );\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { NavLink, RouteProps } from \"react-router-dom\";\n\nimport styled from \"styled-components\";\n\nimport { EveryUser, Message, Peoples, SettingOne } from '@icon-park/react';\n\nimport { AppState } from \"stores\";\nimport { getUserAvatarUrl } from \"utils/getAvatarUrl\";\nimport { REPO_URL, SHORT_NAME } from \"common/constant\";\nimport ProfileCard from \"./Profile\";\nimport { toggleShowProfileCard } from \"actions/ui\";\n\ninterface NavigatorProps extends RouteProps {}\n\nconst NavigatorContainer = styled.div`\n  width: 80px;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n  top: 0;\n  background: #eff0f1;\n  border-right: 1px solid #d0d1d3;\n  padding: 20px 0;\n  text-align: center;\n  z-index: 20;\n`;\n\nconst NavigatorAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  margin-bottom: 20px;\n  cursor: pointer;\n`;\n\nconst NavigatorLinkLabel = styled.p`\n  font-size: 12px;\n  margin: 0px;\n  color: #90959d;\n`;\n\nconst NavigatorLink = styled(NavLink)`\n  display: block;\n  padding: 10px 0;\n  transition: .2s background ease-out;\n  border-left: 4px solid transparent;\n  :hover {\n    background: #dee0e1;\n  }\n  &.active {\n    background: #dee0e1;\n    border-left: 4px solid #2F88FF;\n  }\n  &.active > p {\n    color: #2F88FF;\n  }\n  &.active.message svg path:first-child,  &.active.setting svg path:first-child {\n    fill: #2F88FF;\n    stroke: #2F88FF;\n  }\n  &.active.friends svg path {\n    fill: #2F88FF;\n    stroke: #2F88FF;\n  }\n  &.active.groups svg circle  {\n    fill: #2F88FF;\n    stroke: #2F88FF;\n  }\n  &.active.groups svg path {\n    stroke: #2F88FF;\n  }\n`;\n\nconst NavigatorCopyright = styled.div`\n  width: 80px;\n  position: absolute;\n  bottom: 20px;\n  text-align: center;\n`;\n\nexport default function Navigator(props: NavigatorProps) {\n  const { qq } = useSelector((state: AppState) => state.bot);\n  const { showProfileCard } = useSelector((state: AppState) => state.ui);\n  const dispatch = useDispatch();\n  return (\n    <NavigatorContainer className=\"eine-navigator\">\n      <div className=\"eine-navigator__avatar\">\n        <NavigatorAvatar\n          src={getUserAvatarUrl(qq)}\n          alt=\"User Avatar\"\n          referrerPolicy=\"no-referrer\"\n          onClick={() => dispatch(toggleShowProfileCard())}\n        />\n\n        <NavigatorLink to=\"/panel/message\" className=\"message\">\n          <Message theme=\"filled\" size=\"32\" fill=\"#90959d\" />\n          <NavigatorLinkLabel>消息</NavigatorLinkLabel>\n        </NavigatorLink>\n\n        <NavigatorLink to=\"/panel/friends\" className=\"friends\">\n          <Peoples theme=\"filled\" size=\"32\" fill={\"#90959d\"} />\n          <NavigatorLinkLabel>好友</NavigatorLinkLabel>\n        </NavigatorLink>\n\n        <NavigatorLink to=\"/panel/groups\" className=\"groups\">\n          <EveryUser theme=\"filled\" size=\"32\" fill=\"#90959d\" />\n          <NavigatorLinkLabel>群组</NavigatorLinkLabel>\n        </NavigatorLink>\n\n        <NavigatorLink to=\"/panel/setting\" className=\"setting\">\n          <SettingOne theme=\"filled\" size=\"32\" fill=\"#90959d\" />\n          <NavigatorLinkLabel>设置</NavigatorLinkLabel>\n        </NavigatorLink>\n      </div>\n\n      <NavigatorCopyright>\n        <a href={REPO_URL}>{SHORT_NAME}</a>\n      </NavigatorCopyright>\n\n      {showProfileCard && <ProfileCard />}\n    </NavigatorContainer>\n  );\n}\n","import { UPDATE_MESSAGE_RECORD } from \"common/actionType\";\nimport { MessageChain } from \"common/MessageComponentType\";\nimport { MessageTypeStr, SenderType } from \"common/types\";\n\nexport const updateMessageRecord = (sourceType: MessageTypeStr, target: number, sender: SenderType, messageChain: MessageChain) => {\n  return {\n    type: UPDATE_MESSAGE_RECORD,\n    sourceType,\n    target,\n    sender,\n    messageChain,\n  };\n}","import { updateMessageRecord } from \"actions/record\";\nimport { updateRecentMessageList } from \"actions/ui\";\nimport { messageEventType } from \"common/types\";\nimport store from \"stores\";\n\nlet ws: WebSocket | null = null;\nlet token: string | undefined = undefined;\n\nexport const createWebsocketConnection = (url: string, uid: number, authorization: string) => {\n  ws = new WebSocket(url);\n  \n  ws.addEventListener('open', () => sendViaWebsocket({\n    type: \"authenticate\",\n    uid,\n    authorization,\n  }));\n\n  ws.addEventListener('message', (event) => resolveWebsocketMessage(event.data))\n}\n\nexport const resolveWebsocketMessage = (rawMessage: string) => {\n  let message: any;\n  try {\n    message = JSON.parse(rawMessage);\n  } catch(err) {\n    console.error(err);\n  }\n\n  if (message.type === 'AuthSuccess') {\n    token = message.token;\n    console.log(\"[ws] Auth success, token = \", token);\n    return;\n  }\n  if (message.type === 'RefreshToken') {\n    token = message.token;\n    console.log('[ws] Refresh token, token = ', token);\n    return;\n  }\n\n  if (messageEventType.includes(message.type)) {\n    const { type, sender, messageChain } = message;\n    console.log(\"receive message\");\n    store.dispatch(updateRecentMessageList(type, sender, messageChain));\n    store.dispatch(updateMessageRecord(\n      type,\n      (type === 'GroupMessage' ? sender.group.id : sender.id),\n      sender,\n      messageChain\n    ));\n    return;\n  }\n};\n\nexport const sendViaWebsocket = <P extends object>(payload: P | string) => {\n  if (!ws)\n    return false;\n  \n  if (typeof payload === 'string') {\n    ws.send(payload);\n    return;\n  }\n\n  ws.send(JSON.stringify({\n    ...payload,\n    token,\n  }));\n};","import { clearUnreadTag, setConversationTargrt } from \"actions/ui\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteProps } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport { AppState } from \"stores\";\nimport styled from \"styled-components\";\n\ninterface MessageListProps extends RouteProps {}\n\nconst MessageListContainer = styled.div`\n  width: 300px;\n  height: 100vh;\n  position: fixed;\n  left: 80px;\n  top: 0px;\n  border-right: 1px solid #dededf;\n  z-index: 10;\n`;\n\nconst MessageItem = styled(NavLink)`\n  padding: 20px 15px;\n  display: flex;\n  cursor: pointer;\n  transition: .2s all ease-out;\n  position: relative;\n  :hover { background: #dee0e3; }\n  &.active { background: #f5f6f7; }\n  &.unread::before {\n    content: \"\";\n    position: absolute;\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    background: #f00;\n    border-radius: 50%;\n    left: 50px;\n    top: 20px;\n    z-index: 15;\n  }\n`;\n\nconst MessageItemAvatar = styled.img`\n  width: 45px;\n  height: 45px;\n  border-radius: 50%;\n  position: relative;\n`;\n\nconst MessageItemLabel = styled.div`\n  width: 100%;\n  margin: 0 10px;\n  overflow: hidden;\n  p { margin: 0; }\n`;\n\nconst MessageItemName = styled.p`\n  width: calc(100% - 25px);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: #000;\n`;\n\nconst MessageItemContent = styled.p`\n  width: 100%;\n  color: #888;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst MessageItemTime = styled.span`\n  position: absolute;\n  right: 10px;\n  top: 20px;\n  color: #888;\n`;\n\nexport default function MessageList(props: MessageListProps) {\n  const { recentMessages } = useSelector((state: AppState) => state.ui);\n  const dispatch = useDispatch();\n\n  const renderMessageList = () => {\n    return Object.values(recentMessages)\n      .sort((a: any, b: any) => b.priority - a.priority)\n      .map((message: any, index) => {\n        const sourceType = message.sourceType.replace('Message', '').toLowerCase();\n        const sender = message.sourceType === 'GroupMessage' ? message.sender.group.id : message.sender.id;\n        return (\n          <MessageItem\n            to={`/panel/message/${sourceType}/${sender}`}\n            key={index}\n            className={message.isRead ? \"read\" : \"unread\"}\n            onClick={() => {\n              dispatch(clearUnreadTag(message.id))\n              dispatch(setConversationTargrt(message.sourceType, message.id))\n            }}\n          >\n            <MessageItemAvatar src={message.avatar} alt=\"avatar\" />\n            <MessageItemLabel>\n              <MessageItemName>{message.name}</MessageItemName>\n              <MessageItemContent>{message.lastMessageStr}</MessageItemContent>\n              <MessageItemTime>{moment(message.timestamp).format(\"HH:mm\")}</MessageItemTime>\n            </MessageItemLabel>\n          </MessageItem>\n        );\n      });\n  };\n\n  return (\n    <MessageListContainer>\n      {renderMessageList()}\n    </MessageListContainer>\n  );\n}","import { MessageChain, MessageComponentTypeStr } from \"common/MessageComponentType\";\nimport { MessageTypeStr } from \"common/types\";\nimport moment from \"moment\";\nimport 'moment/locale/zh-cn';\nimport styled from \"styled-components\";\nimport { getUserAvatarUrl } from \"utils/getAvatarUrl\";\n\ninterface BubbleProps {\n  id: number;\n  name: string;\n  time: number;\n  type: MessageTypeStr;\n  messageChain: MessageChain;\n  lastId: number;\n  showTag: boolean;\n}\n\nconst BubbleContainer = styled.div`\n  max-width: 50%;\n  margin: 20px 10px 0 10px;\n  display: flex;\n  &.same {\n    margin: 0;\n  }\n  &.same .container {\n    margin-left: 60px;\n    margin-top: 0;\n    padding: 0;\n  }\n  &.same .content {\n    border-radius: 5px 5px 5px 5px ;\n  }\n`;\nconst BubbleAvatar = styled.img`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n`;\nconst BubbleContentContainer = styled.div`\n  width: 100%;\n  margin-left: 10px;\n`;\nconst BubbleSenderAndTime = styled.div`\n  color: #888;\n`;\nconst BubbbleTime = styled.span`\n  margin-left: 10px;\n  color: #ddd;\n`;\nconst BubbleContent = styled.div`\n  padding: 10px 15px;\n  margin-top: 5px;\n  width: auto;\n  display: inline-block;\n  background: #eff0f1;\n  border-radius: 0px 5px 5px 5px ;\n`;\nconst RecordImage = styled.img`\n  max-width: 100%;\n  display: block;\n`;\nconst At = styled.span`\n  color: #2f5ed3;\n`;\n\nconst parseMessageChain = (messageChain: MessageChain) => {\n  const components: JSX.Element[] = [];\n  messageChain.forEach((item, index) => {\n    if (typeof item === 'string') {\n      components.push(<span key={index}>{item}</span>);\n      return;\n    }\n    \n    switch (item.type) {\n      case MessageComponentTypeStr.PLAIN:\n        return components.push(\n          <span key={index}>{item.text}</span>\n        );\n      case MessageComponentTypeStr.IMAGE:\n        return components.push(\n          <RecordImage key={index} src={item.url!} alt={item.imageId!} referrerPolicy={\"no-referrer\"} />\n        );\n      case MessageComponentTypeStr.AT:\n        return components.push(\n          <At key={index}>@{item.target}</At>\n        );\n      case MessageComponentTypeStr.AT_ALL:\n        return components.push(\n          <At key={index}>@全体成员</At>\n        );\n      case MessageComponentTypeStr.FACE:\n        return components.push(\n          <span key={index}>[表情]</span>\n        );\n    }\n  });\n  return components;\n};\n\nexport function Bubble(props: BubbleProps) {\n  return (\n    <BubbleContainer className={`${props.id === props.lastId ? \"same\" : \"\"}`}>\n      {props.id !== props.lastId && (\n        <BubbleAvatar src={getUserAvatarUrl(props.id)} alt={props.name} />\n      )}\n      <BubbleContentContainer className=\"container\">\n      {props.id !== props.lastId && (\n        <BubbleSenderAndTime>\n        {props.showTag && <span>{props.name}</span>}\n        <BubbbleTime>{moment(props.time).locale(\"zh-cn\").fromNow()}</BubbbleTime>\n        </BubbleSenderAndTime>\n      )}\n\n        <BubbleContent className=\"content\">\n          {parseMessageChain(props.messageChain)}\n        </BubbleContent>\n      </BubbleContentContainer>\n    </BubbleContainer>\n  );\n}","import { updateMessageRecord } from \"actions/record\";\nimport { updateRecentMessageList } from \"actions/ui\";\nimport axios from \"axios\";\nimport { MessageComponentTypeStr, Plain } from \"common/MessageComponentType\";\nimport { MessageTypeStr } from \"common/types\";\nimport React from \"react\";\nimport store from \"stores\";\nimport styled from \"styled-components\";\n\nconst InputBoxContainer = styled.textarea`\n  width: calc(100% - 60px);\n  height: 44px;\n  padding: 10px;\n  border: 1px solid #dededf;\n  outline: 0;\n  margin: 10px 30px;\n  border-radius: 5px;\n  resize: none;\n`;\n\nexport interface InputBoxProps {\n  name: string;\n  type: MessageTypeStr;\n  target: number;\n  group?: number\n\n  authorization: string;\n  uid: number;\n}\n\nexport default function InputBox(props: InputBoxProps) {\n  const textarea = React.createRef<HTMLTextAreaElement>();\n\n  const { uid, authorization, target, type, name } = props;\n  const onKeydown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      const sendContent = (event.target as HTMLTextAreaElement).value;\n      if (!sendContent.length) {\n        return;\n      }\n      axios.post('/api/send_text', {\n        uid,\n        authorization,\n        text: sendContent,\n        target,\n        type,\n      })\n        .then(res => {\n          if (textarea.current)\n            textarea.current.value = \"\";\n          const sender = {\n            id: store.getState().bot.qq,\n            memberName: store.getState().bot.profile.nickname,\n            nickname: name,\n            group: {\n              name,\n              id: target,\n            }\n          } as any;\n          const messageChain = [\n            {\n              type: MessageComponentTypeStr.PLAIN,\n              text: sendContent,\n            } as Plain,\n          ];\n          store.dispatch(\n            updateMessageRecord(\n              type,\n              target,\n              sender,\n              messageChain,\n            )\n          );\n          store.dispatch(updateRecentMessageList(type, {\n            ...sender,\n            id: target,\n          }, messageChain));\n        });\n    }\n  };\n  \n  return (\n    <InputBoxContainer placeholder={`发送给 ${props.name}`} onKeyDown={onKeydown} ref={textarea} />\n  );\n}","import { Peoples, Clipboard } from \"@icon-park/react\";\nimport axios from \"axios\";\nimport { FriendMessageSender, Group, GroupMessageSender, MessageTypeStr, SenderType } from \"common/types\";\nimport React from \"react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { MessageRecordItem } from \"reducers/RecordReducer\";\nimport { AppState } from \"stores\";\n\nimport styled from \"styled-components\";\nimport { getGroupAvatarUrl } from \"utils/getAvatarUrl\";\nimport { Bubble } from \"../common/Bubble\";\nimport InputBox from \"../common/InputBox\";\n\ninterface GroupMessagePageProps extends RouteComponentProps {}\n\nconst GroupMessageContainer = styled.div`\n  width: calc(100vw - 380px);\n  position: fixed;\n  left: 380px;\n`;\n\nconst GroupInfoContainer = styled.div`\n  padding: 20px 30px;\n  display: flex;\n  border-bottom: 1px solid #dededf;\n`;\n\nconst GroupAvatar = styled.img`\n  width: 45px;\n  height: 45px;\n  border-radius: 50%;\n`;\n\nconst GroupInfoLabel = styled.div`\n  width: 100%;\n  margin-left: 10px;\n`;\n\nconst GroupNameLabel = styled.p`\n  font-size: 16px;\n  font-weight: bold;\n  margin: 0;\n`;\n\nconst GroupConfigLabel = styled.p`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  color: #90959d;\n  svg { margin-right: 5px; }\n`;\n\nconst SplitLine = styled.span`\n  padding: 0 10px;\n`;\n\nconst GroupRecordContainer = styled.div`\n  padding: 5px 25px;\n  height: calc(90vh - 60px);\n  overflow: auto;\n`;\n\nexport default function GroupMessagePage(props: GroupMessagePageProps) {\n  const { groups, uid, authorization } = useSelector((state: AppState) => state.bot);\n  const { messageRecords } = useSelector((state: AppState) => state.record);\n\n  const groupId = Number((props.match.params as any).id);\n  const groupItem = groups.filter((item: Group) => item.id === groupId);  \n  const [groupInfo, setGroupInfo] = useState<any | null>(groupItem.length ? groupItem[0] : null);\n  const [groupConfig, setGroupConfig] = useState<any | null>(null);\n  const recordsContainerRef = React.createRef<HTMLDivElement>();\n\n  const renderRecords = useMemo(() => {\n    if (!messageRecords[groupId])\n      return;\n\n    const getSenderName = (sender: SenderType, type: MessageTypeStr) => {\n      if (type === 'GroupMessage')\n        return (sender as GroupMessageSender).memberName;\n      const tmp = (sender as FriendMessageSender);\n      return tmp.remark || tmp.nickname;\n    }\n\n    return messageRecords[groupId].map((message: MessageRecordItem, index: number) => (\n      <Bubble\n        key={index}\n        id={message.sender.id}\n        name={getSenderName(message.sender, message.type)}\n        time={message.time}\n        type={message.type}\n        messageChain={message.messageChain}\n        showTag={true}\n        lastId={index > 0 ? messageRecords[groupId][index-1].sender.id : -1}\n      />\n    ));\n  }, [groupId, messageRecords]);\n\n  useEffect(() => {\n    (async() => {\n      const groupItem = groups.filter((item: Group) => item.id === groupId);\n\n      await axios.get(`/api/group_info?uid=${uid}&groupId=${groupId}`, {\n        headers: { authorization }\n      }).then(res => setGroupConfig(res.data.payload));\n\n      setGroupInfo(groupItem.length ? groupItem[0] : null);\n    })();\n  }, [groups, groupId, uid, authorization]);\n\n  useEffect(() => {\n    if (!recordsContainerRef.current)\n      return;\n      recordsContainerRef.current.scrollTop = recordsContainerRef.current?.scrollHeight;\n  // eslint-disable-next-line\n  }, [groupId, messageRecords]);\n\n  if (!groupInfo) {\n    return null;\n  }\n\n  return (\n    <GroupMessageContainer>\n      <GroupInfoContainer>\n        <GroupAvatar src={getGroupAvatarUrl(groupInfo.id)} alt={groupInfo.name} />\n        <GroupInfoLabel>\n          <GroupNameLabel>{groupInfo && groupInfo.name}</GroupNameLabel>\n          <GroupConfigLabel>\n            <span>\n              <Peoples theme=\"filled\" size=\"12\" fill=\"#90959d\" />\n              <span>{groupConfig && groupConfig.members.length}</span>\n            </span>\n            <SplitLine>|</SplitLine>\n            <span>\n              <Clipboard theme=\"filled\" size=\"12\" fill=\"#90959d\" />\n              <span>{groupConfig && groupConfig.announcement}</span>\n            </span>\n          </GroupConfigLabel>\n        </GroupInfoLabel>\n      </GroupInfoContainer>\n\n      <GroupRecordContainer ref={recordsContainerRef}>{renderRecords}</GroupRecordContainer>\n\n      <InputBox\n        uid={uid}\n        authorization={authorization}\n        name={groupInfo.name}\n        type={MessageTypeStr.GROUP_MESSAGE}\n        target={groupInfo.id}\n      />\n    </GroupMessageContainer>\n  );\n}","import axios from \"axios\";\nimport { Friend, FriendMessageSender, MessageTypeStr, SenderType } from \"common/types\";\nimport React from \"react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { MessageRecordItem } from \"reducers/RecordReducer\";\nimport { AppState } from \"stores\";\nimport styled from \"styled-components\";\nimport { getUserAvatarUrl } from \"utils/getAvatarUrl\";\nimport { Bubble } from \"../common/Bubble\";\nimport InputBox from \"../common/InputBox\";\n\ninterface FriendMessagePageProps extends RouteComponentProps {}\n\nconst FriendMessageContainer = styled.div`\n  width: calc(100vw - 380px);\n  position: fixed;\n  left: 380px;\n`;\n\nconst FriendInfoContainer = styled.div`\n  padding: 20px 30px;\n  display: flex;\n  border-bottom: 1px solid #dededf;\n`;\n\nconst FriendAvatar = styled.img`\n  width: 45px;\n  height: 45px;\n  border-radius: 50%;\n`;\n\nconst FriendLabel = styled.div`\n  width: 100%;\n  margin-left: 10px;\n`;\n\nconst FriendNameLabel = styled.p`\n  font-size: 16px;\n  font-weight: bold;\n  margin: 0;\n`;\n\nconst FriendSignLabel = styled.p`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  color: #90959d;\n  svg { margin-right: 5px; }\n`;\n\nconst FriendRecordContainer = styled.div`\n  padding: 5px 25px;\n  height: calc(90vh - 60px);\n  overflow: auto;\n`;\n\nexport default function FriendMessagePage(props: FriendMessagePageProps) {\n  const { friends, uid, authorization } = useSelector((state: AppState) => state.bot);\n  const { messageRecords } = useSelector((state: AppState) => state.record);\n\n  const friendId = (props.match.params as any).id;\n  const friendItem = friends.filter((item: Friend) => item.id === Number(friendId));\n\n  const [friendInfo, setFriendInfo] = useState<any | null>(friendItem.length ? friendItem[0] : null);\n\n  const recordsContainerRef = React.createRef<HTMLDivElement>();\n\n  const renderRecords = useMemo(() => {\n    if (!messageRecords[friendId])\n      return;\n\n    const getSenderName = (sender: SenderType, type: MessageTypeStr) => {\n      const tmp = (sender as FriendMessageSender);\n      return tmp.remark || tmp.nickname;\n    }\n\n    return messageRecords[friendId].map((message: MessageRecordItem, index: number) => (\n      <Bubble\n        key={index}\n        id={message.sender.id}\n        name={getSenderName(message.sender, message.type)}\n        time={message.time}\n        type={message.type}\n        showTag={false}\n        messageChain={message.messageChain}\n        lastId={index > 0 ? messageRecords[friendId][index-1].sender.id : -1}\n      />\n    ));\n  }, [friendId, messageRecords]);\n\n  useEffect(() => {\n    (async () => {\n      await axios\n        .get(`/api/friend_info?uid=${uid}&friendId=${friendId}`, {\n          headers: { authorization },\n        })\n        .then((res) => {\n          if (res.data.code === 0) setFriendInfo(Object.assign({}, friendInfo, res.data.payload));\n        });\n    })();\n  // eslint-disable-next-line\n  }, [friends, friendId, uid, authorization]);\n\n  if (!friendInfo) {\n    return null;\n  }\n\n\n  return (\n    <FriendMessageContainer>\n      <FriendInfoContainer>\n        <FriendAvatar src={getUserAvatarUrl(friendId)} alt={friendInfo.nickname} />\n        <FriendLabel>\n          <FriendNameLabel>\n            {(friendInfo.remark ? friendInfo.remark : friendInfo.nickname)}\n          </FriendNameLabel>\n          <FriendSignLabel>\n            {friendInfo.sign}\n          </FriendSignLabel>\n        </FriendLabel>\n      </FriendInfoContainer>\n      <FriendRecordContainer ref={recordsContainerRef}>\n        {renderRecords}\n      </FriendRecordContainer>\n      <InputBox\n        uid={uid}\n        authorization={authorization}\n        name={friendInfo.nickname ? friendInfo.nickname : friendInfo.remark}\n        type={MessageTypeStr.FRIEND_MESSAGE}\n        target={friendId}\n      />\n    </FriendMessageContainer>\n  );\n}","import { Friend } from \"common/types\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { AppState } from \"stores\";\nimport styled from \"styled-components\";\nimport { getUserAvatarUrl } from \"utils/getAvatarUrl\";\n\nconst FriendListContainer = styled.div`\n  width: 300px;\n  height: 100vh;\n  position: fixed;\n  left: 80px;\n  top: 0px;\n  border-right: 1px solid #dededf;\n  z-index: 10;\n  overflow-y: auto;\n`;\n\nconst FriendItem = styled(Link)`\n  width: 100%;\n  display: flex;\n  padding: 20px 10px;\n  color: #000;\n  &:hover {\n    background: #dededf;\n    transition: .2s all ease-out;\n    cursor: pointer;\n  }\n`;\n\nconst FriendAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  display: block;\n  border-radius: 50%;\n`;\n\nconst FriendLabel = styled.div`\n  width: calc(100% - 70px);\n  height: 50px;\n  padding: 0 20px;\n  font-size: 16px;\n  line-height: 50px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst ContainerTitle = styled.div`\n  text-align: center;\n  padding: 15px 0;\n  border-bottom: 1px solid #dededf;\n`;\n\ninterface FriendListProps extends RouteComponentProps {}\n\nexport default function FriendList(props: FriendListProps) {\n  const { friends } = useSelector((state: AppState) => state.bot);\n\n  const renderFriends = useMemo(() => {\n    if (!friends)\n      return null;\n    return friends.map((friend: Friend, index: number) => (\n      <FriendItem key={index} to={`/panel/message/friend/${friend.id}`}>\n          <FriendAvatar src={getUserAvatarUrl(friend.id)} alt={friend.nickname} />\n          <FriendLabel>\n            {friend.remark ? friend.remark : friend.nickname}\n          </FriendLabel>\n      </FriendItem>\n    ));\n  }, [friends]);\n\n  return (\n    <FriendListContainer>\n      <ContainerTitle>\n        联系人\n      </ContainerTitle>\n      {renderFriends}\n    </FriendListContainer>\n  );\n}","import { Group } from \"common/types\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { AppState } from \"stores\";\nimport styled from \"styled-components\";\nimport { getGroupAvatarUrl } from \"utils/getAvatarUrl\";\n\nconst GroupListContainer = styled.div`\n  width: 300px;\n  height: 100vh;\n  position: fixed;\n  left: 80px;\n  top: 0px;\n  border-right: 1px solid #dededf;\n  z-index: 10;\n  overflow-y: auto;\n`;\n\nconst GroupItem = styled(Link)`\n  width: 100%;\n  display: flex;\n  padding: 20px 10px;\n  color: #000;\n  &:hover {\n    background: #dededf;\n    transition: .2s all ease-out;\n    cursor: pointer;\n  }\n`;\n\nconst GroupAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  display: block;\n  border-radius: 50%;\n`;\n\nconst GroupLabel = styled.div`\n  width: calc(100% - 70px);\n  height: 50px;\n  padding: 0 20px;\n  font-size: 16px;\n  line-height: 50px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  \n`;\n\nconst ContainerTitle = styled.div`\n  text-align: center;\n  padding: 15px 0;\n  border-bottom: 1px solid #dededf;\n`;\n\ninterface GroupListProps extends RouteComponentProps {}\n\nexport default function GroupList(props: GroupListProps) {\n  const { groups } = useSelector((state: AppState) => state.bot);\n\n  const renderFriends = useMemo(() => {\n    if (!groups)\n      return null;\n    return groups.map((group: Group, index: number) => (\n      <GroupItem key={index} to={`/panel/message/group/${group.id}`}>\n          <GroupAvatar src={getGroupAvatarUrl(group.id)} alt={group.name} />\n          <GroupLabel>\n            {group.name}\n          </GroupLabel>\n      </GroupItem>\n    ));\n  }, [groups]);\n\n  return (\n    <GroupListContainer>\n      <ContainerTitle>\n        群组\n      </ContainerTitle>\n      {renderFriends}\n    </GroupListContainer>\n  );\n}","import Navigator from \"./Navigator\";\n\nimport { Redirect, Route, RouteProps } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppState } from \"stores\";\nimport { useEffect } from \"react\";\nimport { getBotAccountInfo } from \"actions/botInfo\";\nimport { createWebsocketConnection } from \"utils/websocket\";\n\nimport MessageList from \"./Message/MessageList\";\nimport GroupMessagePage from './Message/GroupMessage';\nimport FriendMessagePage from \"./Message/FriendMessage\";\nimport FriendList from \"./List/FriendList\";\nimport GroupList from \"./List/GroupList\";\n\ninterface PanelPageProps extends RouteProps {}\n\nexport default function PanelPage(props: PanelPageProps) {\n  const { uid, authorization } = useSelector((state: AppState) => state.bot);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (uid !== null && authorization !== null) {\n      console.log(uid, authorization, dispatch);\n      dispatch(getBotAccountInfo(uid, authorization));\n      createWebsocketConnection(\n        `${window.location.protocol.startsWith(\"https\") ? \"wss\" : \"ws\"}://${window.location.host}/ws`,\n        uid,\n        authorization\n      );\n    }\n  }, [uid, authorization, dispatch]);\n\n  return (\n    <div className=\"eine-panel\">\n      <Navigator />\n\n      <Route path=\"/panel\" exact>\n        <Redirect to=\"/panel/message\" />\n      </Route>\n\n      <Route path=\"/panel/message\" component={MessageList} />\n      <Route path=\"/panel/message/group/:id\" component={GroupMessagePage} />\n      <Route path=\"/panel/message/friend/:id\" component={FriendMessagePage} />\n      <Route path=\"/panel/friends\" component={FriendList} />\n      <Route path=\"/panel/groups\" component={GroupList} />\n    </div>\n  );\n}","import { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { BrowserRouter, Redirect, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from 'stores';\n\nimport { getBotPublicInfo } from 'actions/botInfo';\n\nimport InstallPage from './InstallPage';\nimport LoginPage from './LoginPage';\nimport PanelPage from './PanelPage';\n\n\nconst AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport default function App() {\n  useEffect(() => {\n    store.dispatch(getBotPublicInfo());\n  }, []);\n\n  return (\n    <AppContainer className=\"eine-app\">\n      <Provider store={store}>\n        <BrowserRouter>\n          <Route path={'/'} exact>\n            <Redirect to={'/panel'}></Redirect>\n          </Route>\n          <Route path={'/install'} component={InstallPage} />\n          <Route path={'/login'} component={LoginPage} />\n          <Route path={'/panel'} component={PanelPage} />\n        </BrowserRouter>\n      </Provider>\n    </AppContainer>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nimport 'normalize.css/normalize.css';\nimport 'antd/dist/antd.min.css';\nimport 'styles/App.less';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}